name: Build
on:
  push:
    branches:
      - main
      - develop

env:
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  IMAGE: klusoga/shelf

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - run: |
          cargo test

  tag:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      semver: ${{ steps.gitversion.outputs.semVer }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3.0.0

      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}" 

      - name: Create tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{steps.gitversion.outputs.semVer}}",
              sha: context.sha
            })  

  release:
    name: Release Api docker image
    runs-on: ubuntu-latest
    outputs:
      IMAGE: ${{ steps.push.outputs.IMAGE }}
    needs:
      - tag
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Build UI
        run: |
          cd shelf-ui
          pnpm i
          pnpm run build

      - name: Build docker image
        id: push
        run: |
          docker build --build-arg Token=${{ secrets.ACTIONS_PAT }} --push -t ${{ env.IMAGE }}:${{ needs.tag.outputs.semver }} .
          echo "IMAGE=${{ env.IMAGE }}:${{ needs.tag.outputs.semver }}" >> $GITHUB_OUTPUT

  deploy_dev:
    name: Deploy Api
    runs-on: ubuntu-latest
    needs:
      - release
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: 411725

          # Optional.
          # github_api_url: https://api.example.com
          installation_id: 43134236

          # Optional.
          # Using a YAML multiline string to avoid escaping the JSON quotes.
          # permissions: >-
          #   {"members": "read"}

          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: klusoga-software/shelf-manifests
          token: ${{ steps.generate_token.outputs.token }}
          path: shelf-manifests

      - name: Get Manifest Repo
        run: |
          cd shelf-manifests
          cd overlays/dev
          kustomize edit set image ${{needs.release.outputs.IMAGE}}
          cd ../../
          git config --global user.email "support@klusoga.de"
          git config --global user.name "Gitlab CI"
          git commit -a -m "[CI] Update Shelf Image"
          git push